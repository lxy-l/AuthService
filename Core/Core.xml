<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="M:Core.IdentityService.IJwtService.GetJwtToken(System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            生成JwtToken
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:Core.IdentityService.IJwtService.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            获取用户id
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Core.IdentityService.IJwtService.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="M:Core.IdentityService.JwtService.GetJwtToken(System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            生成JwtToken
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:Core.IdentityService.JwtService.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            获取用户id
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Core.IdentityService.JwtService.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Core.Models.JwtTokenViewModel">
            <summary>
            JwtToken视图模型
            </summary>
        </member>
        <member name="P:Core.Models.JwtTokenViewModel.access_token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:Core.Models.JwtTokenViewModel.expires_in">
            <summary>
            有效期
            </summary>
        </member>
        <member name="P:Core.Models.JwtTokenViewModel.token_type">
            <summary>
            token类型
            </summary>
        </member>
        <member name="T:Core.Repository.IRepositoryAsync`1">
            <summary>
            异步仓储接口
            </summary>
            <typeparam name="TEntity">实体</typeparam>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Add(`0)">
            <summary>
            添加
            </summary>
            <param name="entity">实体</param>
            <returns>成功则True，反之False</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加
            </summary>
            <param name="listEntity">实体列表</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.DeleteById(System.Object)">
            <summary>
            删除
            </summary>
            <param name="id">主键</param>
            <returns>成功则True，反之False</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="entity">实体</param>
            <returns>成功则True，反之False</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            删除
            </summary>
            <param name="listEntity">实体列表</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.DeleteWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除
            </summary>
            <param name="filter">条件</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Update(`0)">
            <summary>
            修改
            </summary>
            <param name="entity">实体</param>
            <returns>成功则True，反之False</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            修改
            </summary>
            <param name="whereExpression">条件</param>
            <param name="updateExpression">修改字段</param>
            <returns>受影响行数</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Find(System.Object,System.Boolean)">
            <summary>
            查找
            </summary>
            <param name="id">主键</param>
            <param name="isAsNoTracking">是否跟踪对象</param>
            <returns>实体</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Get">
            <summary>
            查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            符合条件的数据条数
            </summary>
            <param name="filter">条件</param>
            <returns>数量</returns>
        </member>
        <member name="M:Core.Repository.IRepositoryAsync`1.Any(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在符合条件的数据
            </summary>
            <param name="filter">条件</param>
            <returns>存在True，反之False</returns>
        </member>
    </members>
</doc>
